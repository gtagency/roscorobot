<launch>

<!--
Declaration of all the material and parameters.
For each material, a value of 1 means that the module corresponding to this material will launch, 0 won't launch
If 1, the material has to be present and a port value may have to be given
-->

<!-- Note that it is assumed that if you don't have an explorer or a corobot 4 wheel drive you have a corobot 2 wheel drive -->
<arg name="Explorer" value="0"/> <!-- 1 if you have a Corobot Explorer, 0 if you have a Corobot Classic -->
<arg name="Corobot4WD" value="0"/> <!-- 1 if you have a Corobot with 4 Wheel Drive -->

<arg name="motors_inverted" value="0"/> <!-- 1 if you want to invert the motors, 0 if not. This is used only in the case where the robot can turn properly but the forward and backward movement are inverted (by testing in the corobot_teleop package for example). It also invert the encoders at the same time-->
<arg name="encoders_inverted" value="0"/> <!-- 1 if you want to invert the encoders, 0 if not. This is used when the odometry give a negative x position when the robot moves forward-->

<!--***** GUI *****-->
<arg name="gui" value="1"/> <!-- 1 if you want to start the GUI (corobot_teleop), 0 if you don't -->

<!--***** ARM *****-->
<arg name="Lynxmotion-al5a" value="0"/> <!-- Put the variable to 1 if you have an lynxmotion- al5a arm. See "SSC32 Motor Controller" section bellow for parameters -->
<arg name="PhantomX-Pincher" value="0"/> <!-- Put the variable to 1 if you have a PhantomX - Pincher -->
<arg name="PhantomX-Reactor" value="0"/> <!-- Put the variable to 1 if you have a PhantomX - Reactor -->
<arg name="corobot_arm_ssc32" value="0"/> <!-- Put the variable to 1 if you have a old corobot_arm that is controlled by an ssc32. See "SSC32 Motor Controller" section bellow for parameters-->
<arg name="corobot_arm_phidget" value="0"/> <!-- Put the variable to 1 if you have a old corobot_arm that is controlled by an Phidgets Servo Controller. see "Phidget Servo Controller" section bellow for parameters-->

<!--***** SSC32 Motor Controller *****-->
<arg name="ssc32" value="0"/> <!-- 1 if you have the ssc32 motor controller, 0 if you don't -->
<arg name="ssc32_port" value="/dev/ttyS1"/> <!-- Port of the ssc32 motor controller -->

<!--***** Phidget Motor Controller *****-->
<arg name="PhidgetMotorController" value="1"/> <!-- 1 if you have the Phidget Motor Controller, 0 if you don't -->

<!--***** Phidget Servo Controller *****-->
<arg name="PhidgetServoController" value="0"/> <!-- 1 if you have the Phidget Servo Controller, 0 if you don't -->
<arg name="psc_firstSerialNumber" value="-1"/> <!-- Only useful if you have 2 phidget Servo controllers, put the serial number of the first phidget device. -1 to indicate the software to use the first recognized device on the network -->
<arg name="psc_secondSerialNumber" value="-1"/>  <!-- Only useful if you have 2 phidget Servo controllers, put the serial number of the second phidget device. -1 to indicate the software to use the second recognized device on the network -->
<arg name="offset" value="-3.0"/> <!-- Value in Degrees corresponding to the offset of the shoulder and elbow angle between the software 90 degrees position and the true 90 degrees position of the arm
 for example -3.0 will make the arm vertical with a shoulder angle of 87 degrees-->
<arg name="one_arm" value="1"/> <!-- 1 if you have one arm, 0 if you don't. If you have two arms connected, put this value to 0-->
<arg name="two_arms" value="0"/> <!-- 1 if you have two arms, 0 if you don't. If you have only arm connected, put this value to 0-->


<!--***** Phidget Interface Kit *****-->
<arg name="phidgetInterfaceKit" value="1"/> <!-- 1 if you have the Phidget Interface Kit, 0 if you don't -->
<arg name="rearBumper" value="0"/> <!-- 1 if you have some rear bumpers, 0 if you don't -->
<arg name="bwOutput" value="0"/> <!-- Index for the digital output used for the sonars. If no sonars are present, this value doesn't matter. -->
<arg name="strobeOutput" value="1"/> <!-- Index for the digital output used for the sonars. If no sonars are present, this value doesn't matter. -->
<arg name="lastSonarInput" value="-1"/> <!-- The last analog input index for the sonars. If no sonar are present, put this value to -1. If only one sonar is present, this value is the same as firstSonarInput -->
<arg name="firstSonarInput" value="-1"/> <!-- The first analog input index for the sonars. If no sonar are present, put this value to -1. If only one sonar is present, this value is the same as lastSonarInput -->
<arg name="battery" value="0"/> <!-- Index of the analog input for the battery(default = 0). -1 if this one is not present or the data doesn't have to be read -->
<arg name="irFront" value="1"/> <!-- Index of the analog input for the front infrared sensor(default = 1). -1 if this one is not present or the data doesn't have to be read -->
<arg name="irBack" value="2"/> <!-- Index of the analog input for the rear infrared sensor(default = 2). if this one is not present or the data doesn't have to be read -->
<arg name="gripper" value="-1"/> <!-- Index of the analog input for the gripper pressure sensor(default = 3). -1 if this one is not present or the data doesn't have to be read -->


<!--***** Kinect *****-->
<arg name="kinect" value="0" />

<!--***** Rear Camera *****-->
<arg name="RearCamera" value="0"/> <!-- 1 if you have one rear camera, 0 if you don't -->
<arg name="cameraRear_mjpeg_stream" value="1"/> <!-- 1 if you want to enable the mjpeg_stream, 0 to unable it. If enable, the camera will send mjpeg stream to the usb instead of raw rgb images. This saves usb bandwidth, but add some computational need-->
<arg name="cameraRear_jpeg_compression" value="1"/> <!-- 1 if you want to enable to jpeg compression for the image visualizer in the corobot_teleop GUI, 0 to unable it -->
<arg name="cameraRear_port" value="/dev/video1"/> <!-- port of the camera -->
<arg name="cameraRear_parameter_file" value="$(find corobot_camera)/camera_parameters/quickcam_pro_9000.txt"/> <!-- parameter file of the camera -->
<arg name="cameraRear_topic" value="/REAR/image_raw"/> <!-- Topic where the images will be send on -->
<arg name="cameraRear_width" value="640"/> <!-- Width of the images -->
<arg name="cameraRear_height" value="480"/> <!-- Height of the images -->
<arg name="cameraRear_immediately" value="true"/> <!-- if true starts the camera immediately, if false requires a manual start-->
<arg name="cameraRear_fps" value="15"/> <!-- Number of images per second received from the camera-->
<arg name="cameraRear_JpegQuality" value="30"/> <!-- JPEG quality, if 100 high quality, if 0 very bad quality -->

<!--***** Front Camera *****-->
<arg name="FrontCamera" value="1"/> <!-- 1 if you have one front camera, 0 if you don't -->
<arg name="cameraFront_mjpeg_stream" value="1"/> <!-- 1 if you want to enable the mjpeg_stream, 0 to unable it. If enable, the camera will send mjpeg stream to the usb instead of raw rgb images. This saves usb bandwidth, but add some computational need-->
<arg name="cameraFront_jpeg_compression" value="1"/> <!-- 1 if you want to enable to jpeg compression for the image visualizer in the corobot_teleop GUI, 0 to unable it -->
<arg name="cameraFront_pantilt" value="0"/> <!-- 1 if you have the front camera is pan tilt, 0 if you don't -->
<arg name="cameraFront_port" value="/dev/video0"/> <!-- port of the camera -->
<arg name="cameraFront_parameter_file" value="$(find corobot_camera)/camera_parameters/quickcam_pro_9000.txt"/> <!-- parameter file of the camera -->
<arg name="cameraFront_topic" value="/PTZ/image_raw"/> <!-- Topic where the images will be send on -->
<arg name="cameraFront_width" value="640"/> <!-- Width of the images -->
<arg name="cameraFront_height" value="480"/> <!-- Height of the images -->
<arg name="cameraFront_immediately" value="true"/> <!-- if true starts the camera immediately, if false requires a manual start-->
<arg name="cameraFront_fps" value="10"/> <!-- Number of images per second received from the camera-->
<arg name="cameraFront_JpegQuality" value="50"/> <!-- JPEG quality, if 100 high quality, if 0 very bad quality -->

<!--***** Hokuyo *****-->
<arg name="hokuyo" value="0"/>  <!-- 1 if you have one Hokuyo laser range finder, 0 if you don't -->
<arg name="hokuyo_skip" value="4"/> <!-- The number of scans to skip between each measured scan. This controls the update rate. For a UTM-30LX, the hokuyo will scan at 40Hz, so setting "skip" to 1 makes it publish at 20Hz. -->

<!--***** GPS *****-->
<arg name="gps" value="0" />

<!--***** Joystick *****-->
<arg name="joystick" value="1"/> <!-- 1 if you have one joystick, 0 if you don't -->
<arg name="joystick_port" value="/dev/input/js0"/> <!-- Port of the joystick -->

<!--***** LAUNCH FILE *****-->
  <group if="$(arg phidgetInterfaceKit)">
  	<node pkg="corobot_phidgetIK" name="phidgettoROS" type="corobot_phidget">
    		<param name="rearBumper" type="bool" value="$(arg rearBumper)"/>
		<param name="bwOutput" type="int" value="$(arg bwOutput)"/>
		<param name="strobeOutput" type="int" value="$(arg strobeOutput)"/>
		<param name="lastSonarInput" type="int" value="$(arg lastSonarInput)"/>
		<param name="firstSonarInput" type="int" value="$(arg firstSonarInput)"/>
		<param name="battery" type="int" value="$(arg battery)"/>
		<param name="irFront" type="int" value="$(arg irFront)"/>
		<param name="irBack" type="int" value="$(arg irBack)"/> 
		<param name="gripper" type="int" value="$(arg gripper)"/>
		<param name="motors_inverted" type="bool" value="$(arg motors_inverted)"/>
		<param name="encoders_inverted" type="bool" value="$(arg encoders_inverted)"/>
  	</node>
	<node pkg="corobot_state_tf" name="corobot_state_tf" type="corobot_state_tf">
		<param name="Explorer" type="bool" value="$(arg Explorer)"/>
		<param name="Corobot4WD" type="bool" value="$(arg Corobot4WD)"/>
		<param name="publish_odom_tf" type="bool" value="1"/>
	</node>
  </group>


  <group if="$(arg FrontCamera)">
	  <param name="PTZ/image_raw/compressed/jpeg_quality" type="int" value="$(arg cameraFront_JpegQuality)"/>

	  <node pkg="corobot_camera" name="PTZcamera" type="dynamic_sender" ns="/PTZ">
		<param name="device" value="$(arg cameraFront_port)"/>
		<param name="camera_parameter_file" value="$(arg cameraFront_parameter_file)" />
		<param name="topic" value="$(arg cameraFront_topic)" />
		<param name="width" value="$(arg cameraFront_width)" />
		<param name="height" value="$(arg cameraFront_height)" />
		<param name="immediately" value="$(arg cameraFront_immediately)" />
		<param name="fps" value="$(arg cameraFront_fps)" />
		<param name="isjpeg" value="$(arg cameraFront_mjpeg_stream)" />

	  </node>
	

	  <group if="$(arg cameraFront_pantilt)">
	  	<node pkg="corobot_pantilt" name="PTZcontrol" type="corobot_pantilt">
			<param name="device" value="$(arg cameraFront_port)"/>
			<param name="script_path" value="$(find corobot_pantilt)/src/init_camera.sh"/>
		</node>
	  </group>
  </group>


  <group if="$(arg RearCamera)">
	  <param name="REAR/image_raw/compressed/jpeg_quality" type="int" value="$(arg cameraRear_JpegQuality)" />

	  <node pkg="corobot_camera" name="REARcamera" type="dynamic_sender" ns="/REAR">
		<param name="device" value="$(arg cameraRear_port)"/>
		<param name="camera_parameter_file" value="$(arg cameraRear_parameter_file)" />
		<param name="topic" value="$(arg cameraRear_topic)" />
		<param name="width" value="$(arg cameraRear_width)" />
		<param name="height" value="$(arg cameraRear_height)" />
		<param name="immediately" value="$(arg cameraRear_immediately)" />
		<param name="fps" value="$(arg cameraRear_fps)" />
		<param name="isjpeg" type="bool" value="$(arg cameraRear_mjpeg_stream)" />
	  </node>
  </group>

  <group if="$(arg ssc32)">
	<group if="$(arg corobot_arm_ssc32)">
		<include file="$(find corobot_arm)/launch/old_corobot_arm.launch" >
			<arg name="ssc32_port" value="$(arg ssc32_port)"/>
			<arg name="PhidgetMotorController" value="$(arg PhidgetMotorController)"/>
		</include>
	</group>

	<group if="$(arg Lynxmotion-al5a)">
		<include file="$(find corobot_arm)/launch/Lynxmotion-al5a.launch" >
			<arg name="ssc32_port" value="$(arg ssc32_port)"/>
		</include>
	</group>
  </group>
   -->

  <!-- corobot_arm and PhidgetServo packages control the arm using the Phidget servo controller whereas the corobot_ssc32 package uses the ssc32 board.
	You can run either corobot_arm and phidgetServo or corobot_ssc32, depending on the material you have on your Corobot
   -->
  <group if="$(arg corobot_arm_phidget)">
	<group if="$(arg PhidgetServoController)">
	  	<group if="$(arg one_arm)">
	  	
			<include file="$(find corobot_arm)/launch/corobot_arm_phidget_oneArm.launch" >
				<arg name="offset" value="$(arg offset)"/>
			</include>

		</group> 

	  	<group if="$(arg two_arms)">

	  		<include file="$(find corobot_arm)/launch/corobot_arm_phidget_twoArm.launch" >
				<arg name="offset" value="$(arg offset)"/>
				<arg name="psc_firstSerialNumber" value="$(arg psc_firstSerialNumber)"/>
				<arg name="psc_secondSerialNumber" value="$(arg psc_secondSerialNumber)"/>
			</include>

		</group>
	  </group>
  </group>
  
   <group if="$(arg PhantomX-Reactor)">
	<include file="$(find corobot_arm)/launch/PhantomX-Reactor.launch" />
  </group>

   <group if="$(arg PhantomX-Pincher)">
	<include file="$(find corobot_arm)/launch/PhantomX-Pincher.launch" />
  </group>

  <group if="$(arg PhidgetMotorController)">
    <node pkg="PhidgetMotor" name="PhidgetMotor" type="PhidgetMotor.py" args="">
	<param name="motors_inverted" type="bool" value="$(arg motors_inverted)"/>
    </node>
  </group>

  <group if="$(arg joystick)">
	  <node pkg="joy" name="joy" type="joy_node">
		<param name="dev" value="$(arg joystick_port)"/>
	  </node>

	  <node pkg="corobot_joystick" name="joystick_control" type="joystick_control"/>
  </group>

  <group if="$(arg hokuyo)">
  	<node pkg="corobot_hokuyo" name="hokuyo" type="corobot_hokuyo" >
		<param name="skip" type="int" value="$(arg hokuyo_skip)"/>
 	 </node>
  </group>

  <group if="$(arg gps)">
  	<node pkg="corobot_gps" name="corobot_gps" type="corobot_gps">
		<param name="use_gps_time" type="bool" value="false"/>
 	</node>
  </group>

  <group if="$(arg kinect)">	
        <include file="$(find openni_launch)/launch/openni.launch"/>
  </group>

  <group if="$(arg gui)">
	  <node pkg="corobot_teleop" name="GUI" type="corobot_teleop">
		<param name="cameraRear_jpeg_compression" type="bool" value="$(arg cameraRear_jpeg_compression)" />
		<param name="cameraFront_jpeg_compression" type="bool" value="$(arg cameraFront_jpeg_compression)" />
	  </node>
  </group>

  <node pkg="diagnostic_aggregator" type="aggregator_node"
        name="diagnostic_aggregator" output="screen">
    <rosparam command="load" 
              file="$(find corobot_teleop)/config/corobot_analyzer.yaml" />
  </node>

</launch>

